{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;AAAA,2BAAkC;AAClC,+BAAwC;AACxC,mCAA6B;AAE7B,YAAY;AACZ,4DAAuD;AAIvD,kBAAkB;AACL,QAAA,CAAC,GAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;AAEvC,OAAO,CAAC,GAAG,CAAC,mBAAI,CAAC,CAAC;AAElB,MAAM,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;IAClE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC;AAEH,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CACzB,IAAA,iBAAY,EAAC,IAAA,cAAO,EAAC,IAAA,cAAO,EAAC,UAAE,CAAC,EAAE,uBAAuB,CAAC,EAAE,MAAM,CAAC,CACpE,CAAC;AACF,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC","sourcesContent":["import { readFileSync } from \"fs\";\nimport { dirname, resolve } from \"path\";\nimport { pj } from \"./pj.js\";\n\n//@ts-ignore\nimport json from \"./json.json\" assert { type: \"json\" };\n\ntype T = typeof json;\n\n//@ts-expect-error\nexport const t: T = { nope: \"not ok\" };\n\nconsole.log(json);\n\nimport(\"./blah.json\", { assert: { type: \"json\" } }).then((result) => {\n  console.error(result);\n});\n\nconst external = JSON.parse(\n  readFileSync(resolve(dirname(pj), \"../json/external.json\"), \"utf8\"),\n);\nconsole.error(\"external\", external);\n"]}